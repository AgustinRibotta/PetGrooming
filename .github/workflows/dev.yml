name: CI - Main

on:
  workflow_dispatch: 
  push:
    branches:
      - main
    paths-ignore:
      - 'kubernetes/backend-deployment.yaml'
      - 'kubernetes/frontend-deployment.yaml'

jobs:

  generate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate.outputs.VERSION }}
    steps:
      - name: Generate version using timestamp
        id: generate
        run: |
          VERSION=$(date +'%Y%m%d%H%M%S')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

  backend:
    runs-on: ubuntu-latest
    needs: generate-version
    env:
      VERSION: ${{ needs.generate-version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set environment variables from secrets
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
          echo "DB_URL=${{ secrets.DB_URL }}"
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}"

      - name: Build Java application using Maven
        run: |
          cd backend
          mvn clean install -DskipTests

      - name: Authenticate with Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          cd backend
          docker build -t agustinribotta/hairdresin-app:$VERSION .
          docker push agustinribotta/hairdresin-app:$VERSION

      - name: Update backend deployment YAML
        run: |
          sed -i "s|agustinribotta/hairdresin-app:.*|agustinribotta/hairdresin-app:$VERSION|" kubernetes/backend-deployment.yaml

  frontend:
    runs-on: ubuntu-latest
    needs: generate-version
    env:
      VERSION: ${{ needs.generate-version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies and build
        run: |
          cd frontend
          npm install
          npm run build

      - name: Authenticate with Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          cd frontend
          docker build -t agustinribotta/hairdresin-frontend:$VERSION .
          docker push agustinribotta/hairdresin-frontend:$VERSION

      - name: Update frontend deployment YAML
        run: |
          sed -i "s|agustinribotta/hairdresin-frontend:.*|agustinribotta/hairdresin-frontend:$VERSION|" kubernetes/frontend-deployment.yaml

  push-yamls:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH for Git push
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Show git status
        run: git status

      - name: Show staged changes
        run: git diff --cached

      - name: Show unstaged changes
        run: git diff
        
      - name: Show backend deployment YAML content
        run: cat kubernetes/backend-deployment.yaml

      - name: Show frontend deployment YAML content
        run: cat kubernetes/frontend-deployment.yaml

      - name: List kubernetes directory files
        run: ls -l kubernetes

      - name: Commit and Push updated YAMLs
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin git@github.com:AgustinRibotta/PetGrooming.git

          git add kubernetes/backend-deployment.yaml
          git add kubernetes/frontend-deployment.yaml

          if git diff --cached --quiet; then
            echo "No deployment YAML changes to commit."
          else
            git commit -m "Update backend and frontend image versions"
            git push origin main
          fi
